name: Deploy Java App to AWS

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.TOKEN }}

      - name: Set Up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'corretto'

      - name: Build JAR with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean build

      - name: Install AWS CLI
        run: |
          sudo apt update && sudo snap install aws-cli --classic 

      - name: Upload to S3
        run: |
          aws s3 cp build/libs/*.jar s3://vijay-980-oi/app.jar
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Configure AWS credentials manually
            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
            echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
            echo "[default]" > ~/.aws/config
            echo "region=us-east-1" >> ~/.aws/config

            export AWS_SHARED_CREDENTIALS_FILE=~/.aws/credentials
            export AWS_CONFIG_FILE=~/.aws/config

            # Verify AWS authentication
            aws sts get-caller-identity || { echo "‚ùå AWS authentication failed"; exit 1; }

            # Download JAR from S3
            aws s3 cp s3://vijay-980-oi/app.jar /home/ubuntu/app.jar || { echo "‚ùå Failed to download JAR"; exit 1; }

            # Ensure correct permissions
            chmod +x /home/ubuntu/app.jar

            # Stop existing Java process (if running)
            pkill -f 'app.jar' || true

            echo "üöÄ Starting the application..."
            nohup java -jar /home/ubuntu/app.jar > /home/ubuntu/app.log 2>&1 &

            # Wait for app to start
            sleep 5

            # Check if application is running
            if pgrep -f 'app.jar' > /dev/null
            then
                echo "‚úÖ Application started successfully."
            else
                echo "‚ùå Application failed to start. Check logs."
                cat /home/ubuntu/app.log
                exit 1
            fi
